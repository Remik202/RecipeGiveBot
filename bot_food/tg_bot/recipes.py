from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import random
import logging 
import os 

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

from demo_data.demo_db import data 

def dish(query: Update, context: CallbackContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - –î–æ–±–∞–≤–∏–ª –µ—â–µ –∫–æ–¥ (–ê–Ω—Ç–æ–Ω)
    from tg_bot.subscription_stats import check_subscription
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    subscribed = context.user_data.get('subscribed', False)

    if subscribed:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ –±–µ–∑ —É—á–µ—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫
        all_dishes = data.copy()
        chosen_dish_key = random.choice(list(all_dishes.keys()))
        chosen_dish = all_dishes[chosen_dish_key]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –±–ª—é–¥–æ
        context.user_data['current_dish'] = chosen_dish

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞
        relative_image_path = chosen_dish["Image"]
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        IMAGES_FOLDER = os.path.join(BASE_DIR, "..", "demo_data", "images")
        absolute_image_path = os.path.join(IMAGES_FOLDER, os.path.basename(relative_image_path))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
        message_text = f"üçΩÔ∏è –í–∞—à–µ –±–ª—é–¥–æ: *{chosen_dish['Name']}*"
        buttons = [
            [
                InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ", callback_data='next_dish'),
                InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data='show_recipe')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)

        with open(absolute_image_path, 'rb') as photo_file:
            context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo_file,
                caption=message_text,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        attempts_left = context.user_data.get('attempts_left', 0)

        if attempts_left > 0:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏, —É–º–µ–Ω—å—à–∞–µ–º —Å—á—ë—Ç—á–∏–∫
            context.user_data['attempts_left'] -= 1

            # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º
            all_dishes = data.copy()
            chosen_dish_key = random.choice(list(all_dishes.keys()))
            chosen_dish = all_dishes[chosen_dish_key]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –±–ª—é–¥–æ
            context.user_data['current_dish'] = chosen_dish

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞
            relative_image_path = chosen_dish["Image"]
            BASE_DIR = os.path.dirname(os.path.abspath(__file__))
            IMAGES_FOLDER = os.path.join(BASE_DIR, "..", "demo_data", "images")
            absolute_image_path = os.path.join(IMAGES_FOLDER, os.path.basename(relative_image_path))

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
            message_text = f"üçΩÔ∏è –í–∞—à–µ –±–ª—é–¥–æ: *{chosen_dish['Name']}*"
            buttons = [
                [
                    InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ", callback_data='next_dish'),
                    InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data='show_recipe')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)

            with open(absolute_image_path, 'rb') as photo_file:
                context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=photo_file,
                    caption=message_text,
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
        else:
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
            offer_subscription(query, context)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
def show_recipe(query: Update, context: CallbackContext):
    current_dish = context.user_data.get('current_dish')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º
    ingredients = '\n'.join(current_dish['products'])
    recipe_steps = current_dish['recipe']
    message_text = f"**{current_dish['Name']}** üìñ –†–µ—Ü–µ–ø—Ç\n\n"
    message_text += f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{ingredients}\n\n"
    message_text += f"–ü–æ—à–∞–≥–æ–≤–æ:\n{recipe_steps}"

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª—é–¥–∞
    buttons = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ", callback_data='next_dish')]]
    reply_markup = InlineKeyboardMarkup(buttons)

    query.message.reply_text(
        text=message_text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –æ—Ñ–µ—Ä—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
def offer_subscription(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='subscribe')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã.",
                              reply_markup=reply_markup)