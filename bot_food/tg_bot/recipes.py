from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import random
import logging
import os
from demo_data.demo_db import data
from tg_bot.subscription_stats import check_subscription


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def dish(query: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ."""
    subscribed = context.user_data.get('subscribed', False)

    if subscribed:
        all_dishes = data.copy()
        chosen_dish_key = random.choice(list(all_dishes.keys()))
        chosen_dish = all_dishes[chosen_dish_key]

        context.user_data['current_dish'] = chosen_dish

        relative_image_path = chosen_dish["Image"]
        base_dir = os.path.dirname(os.path.abspath(__file__))
        images_folder = os.path.join(base_dir, "..", "demo_data", "images")
        absolute_image_path = os.path.join(images_folder, os.path.basename(relative_image_path))

        message_text = f"üçΩÔ∏è –í–∞—à–µ –±–ª—é–¥–æ: *{chosen_dish['Name']}*"
        buttons = [
            [
                InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ", callback_data='next_dish'),
                InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data='show_recipe')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)

        with open(absolute_image_path, 'rb') as photo_file:
            context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo_file,
                caption=message_text,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
    else:
        attempts_left = context.user_data.get('attempts_left', 0)

        if attempts_left > 0:
            context.user_data['attempts_left'] -= 1

            all_dishes = data.copy()
            chosen_dish_key = random.choice(list(all_dishes.keys()))
            chosen_dish = all_dishes[chosen_dish_key]

            context.user_data['current_dish'] = chosen_dish

            relative_image_path = chosen_dish["Image"]
            base_dir = os.path.dirname(os.path.abspath(__file__))
            images_folder = os.path.join(base_dir, "..", "demo_data", "images")
            absolute_image_path = os.path.join(images_folder, os.path.basename(relative_image_path))

            message_text = f"üçΩÔ∏è –í–∞—à–µ –±–ª—é–¥–æ: *{chosen_dish['Name']}*"
            buttons = [
                [
                    InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ", callback_data='next_dish'),
                    InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data='show_recipe')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)

            with open(absolute_image_path, 'rb') as photo_file:
                context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=photo_file,
                    caption=message_text,
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
        else:
            offer_subscription(query, context)


def show_recipe(query: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç —Ç–µ–∫—É—â–µ–≥–æ –±–ª—é–¥–∞."""
    current_dish = context.user_data.get('current_dish')

    ingredients = '\n'.join(current_dish['products'])
    recipe_steps = current_dish['recipe']
    message_text = (
        f"*{current_dish['Name']}* üìñ –†–µ—Ü–µ–ø—Ç\n\n"
        f"*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n{ingredients}\n\n"
        f"*–ü–æ—à–∞–≥–æ–≤–æ:*\n{recipe_steps}"
    )

    buttons = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ", callback_data='next_dish')]]
    reply_markup = InlineKeyboardMarkup(buttons)

    query.message.reply_text(
        text=message_text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


def offer_subscription(update: Update, context: CallbackContext):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."""
    keyboard = [
        [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='subscribe')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "–í–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n"
        "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã.",
        reply_markup=reply_markup
    )

